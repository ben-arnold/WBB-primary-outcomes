
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #---------------------------------------
> # waz-adj-permute.R
> #
> # ben arnold (benarnold@berkeley.edu)
> #
> # adjusted permutation tests for
> # differences in waz at year 1 and year 2
> # follow-ups
> #---------------------------------------
> 
> #---------------------------------------
> # preamble
> #---------------------------------------
> rm(list=ls())
> library(plyr)
> library(coin)
Loading required package: survival
> library(SuperLearner)
Loading required package: nnls
Super Learner
Version: 2.0-19
Package created on 2016-02-02

> 
> # source the base functions
> # which includes the permutation test function used below
> source("~/WBBpa/src/basefns/washb-base-functions.R")
> 
> 
> #---------------------------------------
> # Load the analysis dataset,
> # the baseline covariate dataset
> #---------------------------------------
> 
> bd <- read.csv("~/dropbox/WBB-primary-analysis/data/final/ben/washb-bangladesh-enrol.csv")
> 
> d <- read.csv("~/dropbox/WBB-primary-analysis/data/final/ben/washb-bangladesh-anthro.csv")
> 
> # merge the baseline dataset to the follow-up dataset
> ad <- merge(bd,d,by=c("dataid","clusterid","block","tr"),all.x=F,all.y=T)
> dim(d)
[1] 9341   49
> dim(ad)
[1] 9341  118
> 
> #---------------------------------------
> # load the anthropometry analysis data
> #---------------------------------------
> ad$block <- as.factor(ad$block)
> 
> # ensure that month is coded as a factor
> ad$month <- factor(ad$month)
> 
> # subset the anthropometry to target children (excluding siblings)
> dim(ad)
[1] 9341  118
> ad <- subset(ad,tchild=="Target child")
> dim(ad)
[1] 9341  118
> 
> # Drop children with extreme waz values
> table(ad$waz_x)

   0    1 
9336    5 
> ad <- subset(ad,waz_x!=1)
> 
> # Exclude children with missing data (none)
> table(is.na(ad$waz))

FALSE 
 9336 
> 
> # ensure that month is coded as a factor
> ad$month <- factor(ad$month)
> 
> # lump field investigators with <100 measurements into a single code (arbitrarily choosing N08002 from the list). This FRA code list with N<100 is the same for years 1 and 2.
> ad$fracode[ad$fracode=="20"    ] <- "N08002"
> ad$fracode[ad$fracode=="D03538"] <- "N08002"
> ad$fracode[ad$fracode=="N00436"] <- "N08002"
> ad$fracode[ad$fracode=="N05267"] <- "N08002"
> ad$fracode[ad$fracode=="N05268"] <- "N08002"
> ad$fracode[ad$fracode=="N05271"] <- "N08002"
> ad$fracode[ad$fracode=="N06485"] <- "N08002"
> ad$fracode[ad$fracode=="N08000"] <- "N08002"
> ad$fracode <- factor(ad$fracode)
> 
> #---------------------------------------
> # YEAR 1
> #---------------------------------------
> # subset to the relevant measurement
> table(ad$svy)

   1    2 
4704 4632 
> ad1 <- subset(ad,svy==1)
> dim(ad1)
[1] 4704  118
> 
> # sort the data for perfect replication with jade on the V-fold cross-validation
> ad1 <- ad1[order(ad1$block,ad1$clusterid,ad1$dataid,ad1$childid),]
> 
> # excluding: birth order (missing for 241 children in year 1)
> # excluding: asset_clock (missing for 1000s at enrollment)
> 
> # pre-specified covariates (but not treatment)
> Ws <- subset(ad1,select=c("fracode","month","aged","sex","momage","momedu","momheight","hfiacat","Nlt18","Ncomp","watmin","elec","floor","walls","roof","asset_wardrobe","asset_table","asset_chair","asset_khat","asset_chouki","asset_tv","asset_refrig","asset_bike","asset_moto","asset_sewmach","asset_mobile"))
> 
> # restrict to complete cases
> SLd <- data.frame(id=ad1$clusterid,block=ad1$block,tr=ad1$tr,Y=ad1$waz,Ws)
> dim(SLd)
[1] 4704   30
> SLd <- SLd[complete.cases(SLd),]
> dim(SLd)
[1] 4653   30
> table(SLd$tr)

        Control     Handwashing       Nutrition Nutrition + WSH      Sanitation 
           1112             580             578             602             584 
          Water             WSH 
            605             592 
> 
> # pre-screen the covariates for those associated with the outcome (LR test P<0.2)
> # see washb_prescreen() and design_matrix() in the base functions
> Wscreen <- washb_prescreen(Y=SLd$Y,Ws=SLd[,5:ncol(SLd)],family="gaussian",pval=0.2)
Loading required package: lmtest
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Likelihood Ratio Test P-values:
      [,1]             [,2]       
 [1,] "fracode"        "P = 0.000"
 [2,] "month"          "P = 0.000"
 [3,] "aged"           "P = 0.000"
 [4,] "sex"            "P = 0.416"
 [5,] "momage"         "P = 0.004"
 [6,] "momedu"         "P = 0.000"
 [7,] "momheight"      "P = 0.000"
 [8,] "hfiacat"        "P = 0.000"
 [9,] "Nlt18"          "P = 0.001"
[10,] "Ncomp"          "P = 0.009"
[11,] "watmin"         "P = 0.972"
[12,] "elec"           "P = 0.000"
[13,] "floor"          "P = 0.000"
[14,] "walls"          "P = 0.000"
[15,] "roof"           "P = 0.036"
[16,] "asset_wardrobe" "P = 0.000"
[17,] "asset_table"    "P = 0.000"
[18,] "asset_chair"    "P = 0.000"
[19,] "asset_khat"     "P = 0.000"
[20,] "asset_chouki"   "P = 0.000"
[21,] "asset_tv"       "P = 0.000"
[22,] "asset_refrig"   "P = 0.000"
[23,] "asset_bike"     "P = 0.002"
[24,] "asset_moto"     "P = 0.000"
[25,] "asset_sewmach"  "P = 0.000"
[26,] "asset_mobile"   "P = 0.000"


Covariates selected (P<0.2):
      [,1]             [,2]       
 [1,] "fracode"        "P = 0.000"
 [2,] "month"          "P = 0.000"
 [3,] "aged"           "P = 0.000"
 [4,] "momage"         "P = 0.004"
 [5,] "momedu"         "P = 0.000"
 [6,] "momheight"      "P = 0.000"
 [7,] "hfiacat"        "P = 0.000"
 [8,] "Nlt18"          "P = 0.001"
 [9,] "Ncomp"          "P = 0.009"
[10,] "elec"           "P = 0.000"
[11,] "floor"          "P = 0.000"
[12,] "walls"          "P = 0.000"
[13,] "roof"           "P = 0.036"
[14,] "asset_wardrobe" "P = 0.000"
[15,] "asset_table"    "P = 0.000"
[16,] "asset_chair"    "P = 0.000"
[17,] "asset_khat"     "P = 0.000"
[18,] "asset_chouki"   "P = 0.000"
[19,] "asset_tv"       "P = 0.000"
[20,] "asset_refrig"   "P = 0.000"
[21,] "asset_bike"     "P = 0.002"
[22,] "asset_moto"     "P = 0.000"
[23,] "asset_sewmach"  "P = 0.000"
[24,] "asset_mobile"   "P = 0.000"
> Wselect <- subset(SLd,select=Wscreen)
> Wselect <- design_matrix(Wselect)
> 
> # algorithmic fit of the outcome as a function of selected covariates
> set.seed(12345)
> SLfit1 <- SuperLearner(Y=SLd$Y,X=Wselect,id=SLd$block,
+                        family="gaussian",
+                        SL.library=c("SL.mean","SL.glm","SL.bayesglm","SL.gam","SL.glmnet")
+                        )
Loading required package: arm
Loading required package: MASS
Loading required package: Matrix
Loading required package: lme4

arm (Version 1.9-1, built: 2016-8-21)

Working directory is /Users/benarnold/WBBpa/src/waz

Loading required package: gam
Loading required package: splines
Loading required package: foreach
Loaded gam 1.12

Loading required package: glmnet
Loaded glmnet 2.0-5

> SLfit1

Call:  
SuperLearner(Y = SLd$Y, X = Wselect, family = "gaussian", SL.library = c("SL.mean",  
    "SL.glm", "SL.bayesglm", "SL.gam", "SL.glmnet"), id = SLd$block) 


                    Risk       Coef
SL.mean_All     1.256228 0.02321698
SL.glm_All      1.090055 0.00000000
SL.bayesglm_All 1.090041 0.00000000
SL.gam_All      1.088975 0.49444820
SL.glmnet_All   1.088036 0.48233482
> SLd$pY <- as.vector(predict(SLfit1)$pred)
> SLd$r <- SLd$Y-SLd$pY
> 
> 
> # Hypothesis 1 permutation tests
> permute.1.C.W <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Water"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -0.082486, p-value = 0.9351
alternative hypothesis: true mu is not equal to 0

> permute.1.C.S <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Sanitation"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -1.5189, p-value = 0.1284
alternative hypothesis: true mu is not equal to 0

> permute.1.C.H <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Handwashing"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = 0.42048, p-value = 0.6794
alternative hypothesis: true mu is not equal to 0

> permute.1.C.WSH <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -0.72225, p-value = 0.4755
alternative hypothesis: true mu is not equal to 0

> permute.1.C.N   <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Nutrition"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -3.8487, p-value = 1e-04
alternative hypothesis: true mu is not equal to 0

> permute.1.C.NWSH <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Nutrition + WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -2.3358, p-value = 0.01828
alternative hypothesis: true mu is not equal to 0

> t1h1res <- list(permute.1.C.W,permute.1.C.S,permute.1.C.H,permute.1.C.WSH,permute.1.C.N,permute.1.C.NWSH)
> 
> # Hypothesis 3 permutation tests
> permute.1.N.WSHN   <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Nutrition","Nutrition + WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = 1.5632, p-value = 0.119
alternative hypothesis: true mu is not equal to 0

> permute.1.WSH.NWSH <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("WSH","Nutrition + WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -1.362, p-value = 0.1737
alternative hypothesis: true mu is not equal to 0

> t1h3res <- list(permute.1.N.WSHN,permute.1.WSH.NWSH)
> 
> #---------------------------------------
> # YEAR 2
> #---------------------------------------
> # subset to the relevant measurement
> table(ad$svy)

   1    2 
4704 4632 
> ad2 <- subset(ad,svy==2)
> dim(ad2)
[1] 4632  118
> 
> # sort the data for perfect replication with jade on the V-fold cross-validation
> ad2 <- ad2[order(ad2$block,ad2$clusterid,ad2$dataid,ad2$childid),]
> 
> # pre-specified covariates (but not treatment)
> Ws <- subset(ad2,select=c("fracode","month","aged","sex","birthord","momage","momedu","momheight","hfiacat","Nlt18","Ncomp","watmin","elec","floor","walls","roof","asset_wardrobe","asset_table","asset_chair","asset_khat","asset_chouki","asset_tv","asset_refrig","asset_bike","asset_moto","asset_sewmach","asset_mobile"))
> 
> # restrict to complete cases
> SLd <- data.frame(id=ad2$clusterid,block=ad2$block,tr=ad2$tr,Y=ad2$waz,Ws)
> dim(SLd)
[1] 4632   31
> SLd <- SLd[complete.cases(SLd),]
> dim(SLd)
[1] 4605   31
> table(SLd$tr)

        Control     Handwashing       Nutrition Nutrition + WSH      Sanitation 
           1111             571             570             590             588 
          Water             WSH 
            596             579 
> 
> # pre-screen the covariates for those associated with the outcome (LR test P<0.2)
> # see washb_prescreen() and design_matrix() in the base functions
> Wscreen <- washb_prescreen(Y=SLd$Y,Ws=SLd[,5:ncol(SLd)],family="gaussian",pval=0.2)

Likelihood Ratio Test P-values:
      [,1]             [,2]       
 [1,] "fracode"        "P = 0.000"
 [2,] "month"          "P = 0.000"
 [3,] "aged"           "P = 0.001"
 [4,] "sex"            "P = 0.667"
 [5,] "birthord"       "P = 0.000"
 [6,] "momage"         "P = 0.000"
 [7,] "momedu"         "P = 0.000"
 [8,] "momheight"      "P = 0.000"
 [9,] "hfiacat"        "P = 0.000"
[10,] "Nlt18"          "P = 0.000"
[11,] "Ncomp"          "P = 0.001"
[12,] "watmin"         "P = 0.588"
[13,] "elec"           "P = 0.000"
[14,] "floor"          "P = 0.000"
[15,] "walls"          "P = 0.040"
[16,] "roof"           "P = 0.099"
[17,] "asset_wardrobe" "P = 0.000"
[18,] "asset_table"    "P = 0.000"
[19,] "asset_chair"    "P = 0.000"
[20,] "asset_khat"     "P = 0.000"
[21,] "asset_chouki"   "P = 0.000"
[22,] "asset_tv"       "P = 0.000"
[23,] "asset_refrig"   "P = 0.000"
[24,] "asset_bike"     "P = 0.000"
[25,] "asset_moto"     "P = 0.000"
[26,] "asset_sewmach"  "P = 0.000"
[27,] "asset_mobile"   "P = 0.000"


Covariates selected (P<0.2):
      [,1]             [,2]       
 [1,] "fracode"        "P = 0.000"
 [2,] "month"          "P = 0.000"
 [3,] "aged"           "P = 0.001"
 [4,] "birthord"       "P = 0.000"
 [5,] "momage"         "P = 0.000"
 [6,] "momedu"         "P = 0.000"
 [7,] "momheight"      "P = 0.000"
 [8,] "hfiacat"        "P = 0.000"
 [9,] "Nlt18"          "P = 0.000"
[10,] "Ncomp"          "P = 0.001"
[11,] "elec"           "P = 0.000"
[12,] "floor"          "P = 0.000"
[13,] "walls"          "P = 0.040"
[14,] "roof"           "P = 0.099"
[15,] "asset_wardrobe" "P = 0.000"
[16,] "asset_table"    "P = 0.000"
[17,] "asset_chair"    "P = 0.000"
[18,] "asset_khat"     "P = 0.000"
[19,] "asset_chouki"   "P = 0.000"
[20,] "asset_tv"       "P = 0.000"
[21,] "asset_refrig"   "P = 0.000"
[22,] "asset_bike"     "P = 0.000"
[23,] "asset_moto"     "P = 0.000"
[24,] "asset_sewmach"  "P = 0.000"
[25,] "asset_mobile"   "P = 0.000"
> Wselect <- subset(SLd,select=Wscreen)
> Wselect <- design_matrix(Wselect)
> 
> # algorithmic fit of the outcome as a function of selected covariates
> set.seed(12345)
> SLfit2 <- SuperLearner(Y=SLd$Y,X=Wselect,id=SLd$block,
+                        family="gaussian",
+                        SL.library=c("SL.mean","SL.glm","SL.bayesglm","SL.gam","SL.glmnet")
+ )
> SLfit2

Call:  
SuperLearner(Y = SLd$Y, X = Wselect, family = "gaussian", SL.library = c("SL.mean",  
    "SL.glm", "SL.bayesglm", "SL.gam", "SL.glmnet"), id = SLd$block) 


                     Risk       Coef
SL.mean_All     1.0582846 0.03140279
SL.glm_All      0.9002961 0.00000000
SL.bayesglm_All 0.9002762 0.00000000
SL.gam_All      0.8997753 0.45538967
SL.glmnet_All   0.8987558 0.51320754
> SLd$pY <- as.vector(predict(SLfit2)$pred)
> SLd$r <- SLd$Y-SLd$pY
> 
> # Hypothesis 1 permutation tests
> permute.2.C.W <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Water"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = 0.71018, p-value = 0.4803
alternative hypothesis: true mu is not equal to 0

> permute.2.C.S <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Sanitation"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -0.84699, p-value = 0.3994
alternative hypothesis: true mu is not equal to 0

> permute.2.C.H <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Handwashing"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = 0.44462, p-value = 0.6601
alternative hypothesis: true mu is not equal to 0

> permute.2.C.WSH <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -0.44059, p-value = 0.6636
alternative hypothesis: true mu is not equal to 0

> permute.2.C.N   <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Nutrition"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -4.416, p-value < 2.2e-16
alternative hypothesis: true mu is not equal to 0

> permute.2.C.NWSH <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Control","Nutrition + WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -3.4825, p-value = 0.00042
alternative hypothesis: true mu is not equal to 0

> t2h1res <- list(permute.2.C.W,permute.2.C.S,permute.2.C.H,permute.2.C.WSH,permute.2.C.N,permute.2.C.NWSH)
> 
> # Hypothesis 3 permutation tests
> permute.2.N.WSHN   <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("Nutrition","Nutrition + WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = 1.8127, p-value = 0.07096
alternative hypothesis: true mu is not equal to 0

> permute.2.WSH.NWSH <- washb.permute(Y=SLd$r,tr=SLd$tr,block=SLd$block,contrast=c("WSH","Nutrition + WSH"),seed=12345)

	Approximative Wilcoxon-Pratt Signed-Rank Test

data:  y by x (pos, neg) 
	 stratified by block
Z = -2.38, p-value = 0.01653
alternative hypothesis: true mu is not equal to 0

> t2h3res <- list(permute.2.N.WSHN,permute.2.WSH.NWSH)
> 
> 
> #---------------------------------------
> # put objects in the standard format
> #---------------------------------------
> waz_t1_h1_pval_adj <- as.matrix(sapply(t1h1res,function(x) x$p.value),nrow=6)
> rownames(waz_t1_h1_pval_adj) <- c("Water v C","Sanitation v C","Handwashing v C","WSH v C","Nutrition v C","Nutrition + WSH v C")
> 
> waz_t1_h3_pval_adj <- as.matrix(sapply(t1h3res,function(x) x$p.value),nrow=6)
> rownames(waz_t1_h3_pval_adj) <- c("Nutrition + WSH v Nutrition","Nutrition + WSH v WSH")
> 
> waz_t2_h1_pval_adj <- as.matrix(sapply(t2h1res,function(x) x$p.value),nrow=6)
> rownames(waz_t2_h1_pval_adj) <- c("Water v C","Sanitation v C","Handwashing v C","WSH v C","Nutrition v C","Nutrition + WSH v C")
> 
> waz_t2_h3_pval_adj <- as.matrix(sapply(t2h3res,function(x) x$p.value),nrow=6)
> rownames(waz_t2_h3_pval_adj) <- c("Nutrition + WSH v Nutrition","Nutrition + WSH v WSH")
> 
> 
> #---------------------------------------
> # print results
> #---------------------------------------
> waz_t1_h1_pval_adj
                       [,1]
Water v C           0.93506
Sanitation v C      0.12841
Handwashing v C     0.67943
WSH v C             0.47549
Nutrition v C       0.00010
Nutrition + WSH v C 0.01828
> 
> waz_t1_h3_pval_adj
                               [,1]
Nutrition + WSH v Nutrition 0.11898
Nutrition + WSH v WSH       0.17367
> 
> waz_t2_h1_pval_adj
                       [,1]
Water v C           0.48027
Sanitation v C      0.39937
Handwashing v C     0.66014
WSH v C             0.66365
Nutrition v C       0.00000
Nutrition + WSH v C 0.00042
> 
> waz_t2_h3_pval_adj
                               [,1]
Nutrition + WSH v Nutrition 0.07096
Nutrition + WSH v WSH       0.01653
> 
> #---------------------------------------
> # add suffix for replication
> #---------------------------------------
> waz_t1_h1_pval_adj_b <- waz_t1_h1_pval_adj
> waz_t1_h3_pval_adj_b <- waz_t1_h3_pval_adj
> waz_t2_h1_pval_adj_b <- waz_t2_h1_pval_adj
> waz_t2_h3_pval_adj_b <- waz_t2_h3_pval_adj
> rm(waz_t1_h1_pval_adj,waz_t1_h3_pval_adj,waz_t2_h1_pval_adj,waz_t2_h3_pval_adj)
> 
> #---------------------------------------
> # save all of the results
> # excluding the datasets
> #---------------------------------------
> rm(bd,d,ad,ad1,ad2,SLd,Ws,Wselect)
> rm(SLfit1,SLfit2,t1h1res,t1h3res,t2h1res,t2h3res)
> save.image("~/dropbox/WBB-primary-analysis/results/raw/ben/bangladesh-waz-adj-permute.RData")
> 
> 
> 
> proc.time()
   user  system elapsed 
 37.778   2.599  41.351 
